name: Laravel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:latest
        options: --privileged

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build and start containers
        run: |
          docker-compose -f ./docker-compose.yaml up -d
          docker-compose -f ./docker-compose.yaml ps

      - name: Install Dependencies
        run: docker-compose -f ./docker-compose.yaml exec -T app composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: docker-compose -f ./docker-compose.yaml exec -T app php artisan key:generate

      - name: Directory Permissions
        run: docker-compose -f ./docker-compose.yaml exec -T app chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          docker-compose -f ./docker-compose.yaml exec -T app php artisan db:seed --force
          docker-compose -f ./docker-compose.yaml exec -T app php artisan cache:clear
          docker-compose -f ./docker-compose.yaml exec -T app php artisan route:clear
          docker-compose -f ./docker-compose.yaml exec -T app php artisan config:clear
          docker-compose -f ./docker-compose.yaml exec -T app php artisan view:clear
          docker-compose -f ./docker-compose.yaml exec -T app php artisan key:generate

      - name: Save Docker images as artifacts
        run: |
          mkdir -p docker_images
          docker images --format "{{.Repository}}:{{.Tag}}" | grep t-nsa-800 | while IFS=: read -r repo tag; do
            docker save -o "docker_images/${repo}_${tag}.tar" "${repo}:${tag}"
            echo "Saved ${repo}:${tag}"
          done
        working-directory: ${{ github.workspace }}


      # - name: Build and push Docker images
      #   run: |
      #     mkdir -p docker_images
      #     services=$(docker-compose -f ./docker-compose.yaml config --services)
      #     for service in $services; do
      #       docker-compose -f ./docker-compose.yaml build $service
      #       docker-compose -f ./docker-compose.yaml push $service
      #     done
      #   working-directory: ${{ github.workspace }}

      - name: List Docker images
        run: docker images

      - name: List contents of docker_images directory
        run: ls -l docker_images/

      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker_images/

      - name: Get Artifact Download URL
        id: get-artifact-url
        run: |
          ARTIFACT_NAME="docker-images"
          URL=$(curl \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
          echo "ARTIFACT_URL=$URL" >> $GITHUB_ENV
        shell: bash


    
      - name: Download Docker images artifact
        run: |
          mkdir -p docker_images
          # Utilisation de curl pour télécharger l'artefact
          curl -L -o docker_images/docker-images.zip ${{ env.ARTIFACT_URL }}
          # Utilisation de unzip pour extraire le fichier .zip
          unzip docker_images/docker-images.zip -d docker_images/
        working-directory: ${{ github.workspace }}


      - name: Load Docker images and push to remote server
        run: |
          mkdir -p ansible
          echo "- hosts: remote
            tasks:
              - name: Copy Docker images
                copy:
                  src: ./docker_images/
                  dest: /home
                  owner: root
                  group: root
                  mode: '0755'
              - name: Load Docker images
                command: docker load -i /home/{{ item }}
                with_items: "{{ lookup('fileglob', './docker_images/*', wantlist=True) }}"
            become: yes" > ansible/deploy.yml
          ansible-playbook -i ./inventory.yml ansible/deploy.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
